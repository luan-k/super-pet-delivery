// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: client.sql

package db

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO client (
    full_name,
    phone_whatsapp,
    phone_line,
    pet_name,
    pet_breed,
    address_street,
    address_number,
    address_neighborhood,
    address_reference
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, full_name, phone_whatsapp, phone_line, pet_name, pet_breed, address_street, address_number, address_neighborhood, address_reference
`

type CreateClientParams struct {
	FullName            string `json:"full_name"`
	PhoneWhatsapp       string `json:"phone_whatsapp"`
	PhoneLine           string `json:"phone_line"`
	PetName             string `json:"pet_name"`
	PetBreed            string `json:"pet_breed"`
	AddressStreet       string `json:"address_street"`
	AddressNumber       string `json:"address_number"`
	AddressNeighborhood string `json:"address_neighborhood"`
	AddressReference    string `json:"address_reference"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.FullName,
		arg.PhoneWhatsapp,
		arg.PhoneLine,
		arg.PetName,
		arg.PetBreed,
		arg.AddressStreet,
		arg.AddressNumber,
		arg.AddressNeighborhood,
		arg.AddressReference,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneWhatsapp,
		&i.PhoneLine,
		&i.PetName,
		&i.PetBreed,
		&i.AddressStreet,
		&i.AddressNumber,
		&i.AddressNeighborhood,
		&i.AddressReference,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM client
WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getClient = `-- name: GetClient :one
SELECT id, full_name, phone_whatsapp, phone_line, pet_name, pet_breed, address_street, address_number, address_neighborhood, address_reference FROM client
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClient(ctx context.Context, id int64) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClient, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneWhatsapp,
		&i.PhoneLine,
		&i.PetName,
		&i.PetBreed,
		&i.AddressStreet,
		&i.AddressNumber,
		&i.AddressNeighborhood,
		&i.AddressReference,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, full_name, phone_whatsapp, phone_line, pet_name, pet_breed, address_street, address_number, address_neighborhood, address_reference FROM client
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListClientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClients(ctx context.Context, arg ListClientsParams) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Client{}
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.PhoneWhatsapp,
			&i.PhoneLine,
			&i.PetName,
			&i.PetBreed,
			&i.AddressStreet,
			&i.AddressNumber,
			&i.AddressNeighborhood,
			&i.AddressReference,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE client 
SET 
    full_name = COALESCE($2, full_name),
    phone_whatsapp = COALESCE($3, phone_whatsapp),
    phone_line = COALESCE($4, phone_line),
    pet_name = COALESCE($5, pet_name),
    pet_breed = COALESCE($6, pet_breed),
    address_street = COALESCE($7, address_street),
    address_number = COALESCE($8, address_number),
    address_neighborhood = COALESCE($9, address_neighborhood),
    address_reference = COALESCE($10, address_reference)
WHERE id = $1
RETURNING id, full_name, phone_whatsapp, phone_line, pet_name, pet_breed, address_street, address_number, address_neighborhood, address_reference
`

type UpdateClientParams struct {
	ID                  int64  `json:"id"`
	FullName            string `json:"full_name"`
	PhoneWhatsapp       string `json:"phone_whatsapp"`
	PhoneLine           string `json:"phone_line"`
	PetName             string `json:"pet_name"`
	PetBreed            string `json:"pet_breed"`
	AddressStreet       string `json:"address_street"`
	AddressNumber       string `json:"address_number"`
	AddressNeighborhood string `json:"address_neighborhood"`
	AddressReference    string `json:"address_reference"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.ID,
		arg.FullName,
		arg.PhoneWhatsapp,
		arg.PhoneLine,
		arg.PetName,
		arg.PetBreed,
		arg.AddressStreet,
		arg.AddressNumber,
		arg.AddressNeighborhood,
		arg.AddressReference,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneWhatsapp,
		&i.PhoneLine,
		&i.PetName,
		&i.PetBreed,
		&i.AddressStreet,
		&i.AddressNumber,
		&i.AddressNeighborhood,
		&i.AddressReference,
	)
	return i, err
}
